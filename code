#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
 
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h> 
#include <math.h>

using namespace std;
using namespace cv;
int test=0;
int frame=0;
int a=0;
int b=0;
char ch;
string l;
double refc=0;
double reft=0;
float angle=0.0;
float num=0.0;
int cnt=0;
float aa;
float bb;
float cc;
float dd;
float ee;
float ff;
float rd;
FILE *fp;
 int frame_counter = 0;
int main(int argc, const char** argv)
{
	//double t = 0;
    //create the cascade classifier object used for the face detection
    CascadeClassifier face_cascade;
	fp = fopen("test.txt","w+");

    //use the haarcascade_frontalface_alt.xml library
    face_cascade.load("C:/opencv247/sources/data/haarcascades/haarcascade_frontalface_alt.xml");
 
    //setup video capture device and link it to the first capture device
    VideoCapture captureDevice;
    captureDevice.open(0);
	frame++;


 
    //setup image files used in the capture process
    Mat captureFrame;
    Mat grayscaleFrame;
 
    //create a window to present the results
    namedWindow("outputCapture", 1);
 
    //create a loop to capture and find faces
	printf(".......Enter space key.......\n");
    while(true)
    {
        //capture a new image frame
        captureDevice>>captureFrame;
		frame++;
        std::vector<Rect> faces;
		Mat grayscaleFrame;
        //convert captured image to gray scale and equalize
        cvtColor(captureFrame, grayscaleFrame, CV_BGR2GRAY);
        equalizeHist(grayscaleFrame, grayscaleFrame);
        //find faces and store them in the vector array
        face_cascade.detectMultiScale(grayscaleFrame, faces, 1.1, 3, CV_HAAR_FIND_BIGGEST_OBJECT|CV_HAAR_SCALE_IMAGE, Size(30,30));
        //draw a rectangle for all found faces in the vector array on the original image

		for(int i = 0; i < faces.size(); i++)
		{	Point center( faces[i].x + faces[i].width*0.5, faces[i].y + faces[i].height*0.5 );
			ellipse( captureFrame, center, Size( faces[i].width*0.5, faces[i].height*0.5), 0, 0, 360, Scalar( 255, 0, 255 ), 4, 8, 0 );
			Point pt1(faces[i].x + faces[i].width, faces[i].y + faces[i].height);
			Point pt2(faces[i].x, faces[i].y);
			rectangle(captureFrame, pt1, pt2, cvScalar(0, 255, 0, 0), 1, 8, 0);
			// torso point to be calculated center.x,pt1.y+150:
			line( captureFrame,Point(center.x,pt1.y+150), Point(center.x,pt2.y), Scalar( 255, 0, 0 ), 2, 8, 0);
			//print the output
			imshow("outputCapture", captureFrame);
		   //printf("%f %f\n",faces[i].x + faces[i].width*0.5, faces[i].y + faces[i].height*0.5);

		if (waitKey(10) == 32) //wait for 'space' key press for 30ms. 
		{
			cout << "space key is pressed by user" << endl;
			b=frame; 
			Point refc(faces[i].x + faces[i].width*0.5,faces[i].y + faces[i].height*0.5);
			Point reft(faces[i].x + faces[i].width*0.5,(faces[i].y + faces[i].height)+150);	
			
			aa=reft.x;
			bb=reft.y;
			cc=refc.x;
			dd=refc.y;
			//printf("first point: %f %f\n", aa,bb);
		   //printf("second point: %f %f\n", cc,dd);	
			
			float refdistx=(cc-aa);
			float refdisty=(dd-bb);
			float refdist=sqrt(refdistx*refdistx+refdisty*refdisty);
			rd=refdist;
			//printf("ref.dist:%f\n",rd);
			system("pause");
			cnt++;
			waitKey(40);
		}
		   //printf("first point: %f %f\n", aa,bb);          
		 
		if(cnt==1)
		{
			Point newc(faces[i].x + faces[i].width*0.5,faces[i].y + faces[i].height*0.5);
			ee=newc.x;
			ff=newc.y;
			//printf("third point:%f %f\n", ee,ff);
			float distx=(ee-aa);
			float disty=(ff-bb);
			float dist=sqrt(distx*distx+disty*disty);
			//printf("dist:%f\n",dist);	
			float ndistx=(ee-cc);
			float ndisty=(ff-dd);
			float newdist=sqrt(ndistx*ndistx+ndisty*ndisty);
			//printf("newdist: %f\n",newdist);
			num=(dist*dist+rd*rd-newdist*newdist)/(2*dist*rd);
			 if(ee<cc)
			 angle=-acos(num)*57.29;
			 else
              angle=acos(num)*57.29;
			//float test = angle;
			fprintf(fp,"%f\n",angle);
			//fputc('c',fp);
			printf("%f\n",angle);	
			
		}
		}
		if (frame_counter == 500)
				break;
			else
				frame_counter++;
	}
	fclose(fp);
	return 0;
}
